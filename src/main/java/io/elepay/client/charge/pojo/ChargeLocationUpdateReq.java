/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.client.charge.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.elepay.client.charge.pojo.AddressTransliterationDto;
import io.elepay.client.charge.pojo.ChargeLocationStatusType;
import io.elepay.client.charge.pojo.StringTransliterationDto;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ロケーションリ更新クエスト
 */
@JsonPropertyOrder({
  ChargeLocationUpdateReq.JSON_PROPERTY_NAME,
  ChargeLocationUpdateReq.JSON_PROPERTY_TEL,
  ChargeLocationUpdateReq.JSON_PROPERTY_ZIP,
  ChargeLocationUpdateReq.JSON_PROPERTY_ADDRESS,
  ChargeLocationUpdateReq.JSON_PROPERTY_LATITUDE,
  ChargeLocationUpdateReq.JSON_PROPERTY_LONGITUDE,
  ChargeLocationUpdateReq.JSON_PROPERTY_NOTE,
  ChargeLocationUpdateReq.JSON_PROPERTY_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ChargeLocationUpdateReq {
  public static final String JSON_PROPERTY_NAME = "name";
  private StringTransliterationDto name;

  public static final String JSON_PROPERTY_TEL = "tel";
  private String tel;

  public static final String JSON_PROPERTY_ZIP = "zip";
  private String zip;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private AddressTransliterationDto address;

  public static final String JSON_PROPERTY_LATITUDE = "latitude";
  private Double latitude;

  public static final String JSON_PROPERTY_LONGITUDE = "longitude";
  private Double longitude;

  public static final String JSON_PROPERTY_NOTE = "note";
  private String note;

  public static final String JSON_PROPERTY_STATUS = "status";
  private ChargeLocationStatusType status;

  public ChargeLocationUpdateReq() {
  }

  public ChargeLocationUpdateReq name(StringTransliterationDto name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StringTransliterationDto getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(StringTransliterationDto name) {
    this.name = name;
  }


  public ChargeLocationUpdateReq tel(String tel) {
    
    this.tel = tel;
    return this;
  }

   /**
   * 電話番号
   * @return tel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTel() {
    return tel;
  }


  @JsonProperty(JSON_PROPERTY_TEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTel(String tel) {
    this.tel = tel;
  }


  public ChargeLocationUpdateReq zip(String zip) {
    
    this.zip = zip;
    return this;
  }

   /**
   * 郵便番号
   * @return zip
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getZip() {
    return zip;
  }


  @JsonProperty(JSON_PROPERTY_ZIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZip(String zip) {
    this.zip = zip;
  }


  public ChargeLocationUpdateReq address(AddressTransliterationDto address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AddressTransliterationDto getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(AddressTransliterationDto address) {
    this.address = address;
  }


  public ChargeLocationUpdateReq latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * 緯度
   * @return latitude
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLatitude() {
    return latitude;
  }


  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public ChargeLocationUpdateReq longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * 経度
   * @return longitude
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getLongitude() {
    return longitude;
  }


  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public ChargeLocationUpdateReq note(String note) {
    
    this.note = note;
    return this;
  }

   /**
   * 備考
   * @return note
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNote() {
    return note;
  }


  @JsonProperty(JSON_PROPERTY_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNote(String note) {
    this.note = note;
  }


  public ChargeLocationUpdateReq status(ChargeLocationStatusType status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChargeLocationStatusType getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(ChargeLocationStatusType status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeLocationUpdateReq chargeLocationUpdateReq = (ChargeLocationUpdateReq) o;
    return Objects.equals(this.name, chargeLocationUpdateReq.name) &&
        Objects.equals(this.tel, chargeLocationUpdateReq.tel) &&
        Objects.equals(this.zip, chargeLocationUpdateReq.zip) &&
        Objects.equals(this.address, chargeLocationUpdateReq.address) &&
        Objects.equals(this.latitude, chargeLocationUpdateReq.latitude) &&
        Objects.equals(this.longitude, chargeLocationUpdateReq.longitude) &&
        Objects.equals(this.note, chargeLocationUpdateReq.note) &&
        Objects.equals(this.status, chargeLocationUpdateReq.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, tel, zip, address, latitude, longitude, note, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeLocationUpdateReq {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tel: ").append(toIndentedString(tel)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(getName().toUrlQueryString(prefix + "name" + suffix));
    }

    // add `tel` to the URL query string
    if (getTel() != null) {
      try {
        joiner.add(String.format("%stel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `zip` to the URL query string
    if (getZip() != null) {
      try {
        joiner.add(String.format("%szip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getZip()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `address` to the URL query string
    if (getAddress() != null) {
      joiner.add(getAddress().toUrlQueryString(prefix + "address" + suffix));
    }

    // add `latitude` to the URL query string
    if (getLatitude() != null) {
      try {
        joiner.add(String.format("%slatitude%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLatitude()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `longitude` to the URL query string
    if (getLongitude() != null) {
      try {
        joiner.add(String.format("%slongitude%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLongitude()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `note` to the URL query string
    if (getNote() != null) {
      try {
        joiner.add(String.format("%snote%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNote()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

