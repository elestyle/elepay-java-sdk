/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.client.charge.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * 住所オブジェクト
 */
@JsonPropertyOrder({
  AddressDto.JSON_PROPERTY_PREF,
  AddressDto.JSON_PROPERTY_CITY,
  AddressDto.JSON_PROPERTY_TOWN,
  AddressDto.JSON_PROPERTY_ADDRESS1,
  AddressDto.JSON_PROPERTY_ADDRESS2
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class AddressDto {
  public static final String JSON_PROPERTY_PREF = "pref";
  private String pref;

  public static final String JSON_PROPERTY_CITY = "city";
  private String city;

  public static final String JSON_PROPERTY_TOWN = "town";
  private String town;

  public static final String JSON_PROPERTY_ADDRESS1 = "address1";
  private String address1;

  public static final String JSON_PROPERTY_ADDRESS2 = "address2";
  private String address2;

  public AddressDto() {
  }

  public AddressDto pref(String pref) {
    
    this.pref = pref;
    return this;
  }

   /**
   * 都道府県
   * @return pref
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPref() {
    return pref;
  }


  @JsonProperty(JSON_PROPERTY_PREF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPref(String pref) {
    this.pref = pref;
  }


  public AddressDto city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * 市区町村
   * @return city
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCity(String city) {
    this.city = city;
  }


  public AddressDto town(String town) {
    
    this.town = town;
    return this;
  }

   /**
   * 町域
   * @return town
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTown() {
    return town;
  }


  @JsonProperty(JSON_PROPERTY_TOWN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTown(String town) {
    this.town = town;
  }


  public AddressDto address1(String address1) {
    
    this.address1 = address1;
    return this;
  }

   /**
   * 住所1
   * @return address1
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress1() {
    return address1;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public AddressDto address2(String address2) {
    
    this.address2 = address2;
    return this;
  }

   /**
   * 住所2
   * @return address2
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress2() {
    return address2;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress2(String address2) {
    this.address2 = address2;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddressDto addressDto = (AddressDto) o;
    return Objects.equals(this.pref, addressDto.pref) &&
        Objects.equals(this.city, addressDto.city) &&
        Objects.equals(this.town, addressDto.town) &&
        Objects.equals(this.address1, addressDto.address1) &&
        Objects.equals(this.address2, addressDto.address2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pref, city, town, address1, address2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddressDto {\n");
    sb.append("    pref: ").append(toIndentedString(pref)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    town: ").append(toIndentedString(town)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `pref` to the URL query string
    if (getPref() != null) {
      try {
        joiner.add(String.format("%spref%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPref()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `city` to the URL query string
    if (getCity() != null) {
      try {
        joiner.add(String.format("%scity%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCity()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `town` to the URL query string
    if (getTown() != null) {
      try {
        joiner.add(String.format("%stown%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTown()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `address1` to the URL query string
    if (getAddress1() != null) {
      try {
        joiner.add(String.format("%saddress1%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAddress1()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `address2` to the URL query string
    if (getAddress2() != null) {
      try {
        joiner.add(String.format("%saddress2%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAddress2()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

