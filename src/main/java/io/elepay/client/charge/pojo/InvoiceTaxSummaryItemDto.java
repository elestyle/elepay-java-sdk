/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.client.charge.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.elepay.client.charge.pojo.TaxRateType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * インボイス税金サマリーアイテム
 */
@JsonPropertyOrder({
  InvoiceTaxSummaryItemDto.JSON_PROPERTY_TAX_RATE_TYPE,
  InvoiceTaxSummaryItemDto.JSON_PROPERTY_AMOUNT,
  InvoiceTaxSummaryItemDto.JSON_PROPERTY_TAX
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvoiceTaxSummaryItemDto {
  public static final String JSON_PROPERTY_TAX_RATE_TYPE = "taxRateType";
  private TaxRateType taxRateType;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Integer amount;

  public static final String JSON_PROPERTY_TAX = "tax";
  private Integer tax;

  public InvoiceTaxSummaryItemDto() {
  }

  public InvoiceTaxSummaryItemDto taxRateType(TaxRateType taxRateType) {
    
    this.taxRateType = taxRateType;
    return this;
  }

   /**
   * Get taxRateType
   * @return taxRateType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_RATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TaxRateType getTaxRateType() {
    return taxRateType;
  }


  @JsonProperty(JSON_PROPERTY_TAX_RATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxRateType(TaxRateType taxRateType) {
    this.taxRateType = taxRateType;
  }


  public InvoiceTaxSummaryItemDto amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * 対象金額
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public InvoiceTaxSummaryItemDto tax(Integer tax) {
    
    this.tax = tax;
    return this;
  }

   /**
   * 税金
   * @return tax
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTax() {
    return tax;
  }


  @JsonProperty(JSON_PROPERTY_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTax(Integer tax) {
    this.tax = tax;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceTaxSummaryItemDto invoiceTaxSummaryItemDto = (InvoiceTaxSummaryItemDto) o;
    return Objects.equals(this.taxRateType, invoiceTaxSummaryItemDto.taxRateType) &&
        Objects.equals(this.amount, invoiceTaxSummaryItemDto.amount) &&
        Objects.equals(this.tax, invoiceTaxSummaryItemDto.tax);
  }

  @Override
  public int hashCode() {
    return Objects.hash(taxRateType, amount, tax);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceTaxSummaryItemDto {\n");
    sb.append("    taxRateType: ").append(toIndentedString(taxRateType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `taxRateType` to the URL query string
    if (getTaxRateType() != null) {
      try {
        joiner.add(String.format("%staxRateType%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTaxRateType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      try {
        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tax` to the URL query string
    if (getTax() != null) {
      try {
        joiner.add(String.format("%stax%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTax()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

