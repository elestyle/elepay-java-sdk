/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.client.charge.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.elepay.client.charge.pojo.SubscriptionIntervalType;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * 定期課金作成リクエスト
 */
@JsonPropertyOrder({
  SubscriptionReq.JSON_PROPERTY_NAME,
  SubscriptionReq.JSON_PROPERTY_CUSTOMER_ID,
  SubscriptionReq.JSON_PROPERTY_CURRENCY,
  SubscriptionReq.JSON_PROPERTY_AMOUNT,
  SubscriptionReq.JSON_PROPERTY_INTERVAL,
  SubscriptionReq.JSON_PROPERTY_INTERVAL_SPAN,
  SubscriptionReq.JSON_PROPERTY_INITIAL_AMOUNT,
  SubscriptionReq.JSON_PROPERTY_FIRST_CHARGE_TIME,
  SubscriptionReq.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscriptionReq {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
  private String customerId;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency = "JPY";

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Integer amount;

  public static final String JSON_PROPERTY_INTERVAL = "interval";
  private SubscriptionIntervalType interval;

  public static final String JSON_PROPERTY_INTERVAL_SPAN = "intervalSpan";
  private Integer intervalSpan = 1;

  public static final String JSON_PROPERTY_INITIAL_AMOUNT = "initialAmount";
  private Integer initialAmount;

  public static final String JSON_PROPERTY_FIRST_CHARGE_TIME = "firstChargeTime";
  private Long firstChargeTime;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = new HashMap<>();

  public SubscriptionReq() {
  }

  public SubscriptionReq name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * 定期課金名
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public SubscriptionReq customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * カスタマID
   * @return customerId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCustomerId() {
    return customerId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public SubscriptionReq currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * 通貨コード (ISO_4217)
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public SubscriptionReq amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * 每期課金金額
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public SubscriptionReq interval(SubscriptionIntervalType interval) {
    
    this.interval = interval;
    return this;
  }

   /**
   * Get interval
   * @return interval
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubscriptionIntervalType getInterval() {
    return interval;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterval(SubscriptionIntervalType interval) {
    this.interval = interval;
  }


  public SubscriptionReq intervalSpan(Integer intervalSpan) {
    
    this.intervalSpan = intervalSpan;
    return this;
  }

   /**
   * 定期課金周期間隔（何周期単位ごとに課金されます）
   * @return intervalSpan
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVAL_SPAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getIntervalSpan() {
    return intervalSpan;
  }


  @JsonProperty(JSON_PROPERTY_INTERVAL_SPAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntervalSpan(Integer intervalSpan) {
    this.intervalSpan = intervalSpan;
  }


  public SubscriptionReq initialAmount(Integer initialAmount) {
    
    this.initialAmount = initialAmount;
    return this;
  }

   /**
   * 初回支払い前の固定支払額
   * @return initialAmount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInitialAmount() {
    return initialAmount;
  }


  @JsonProperty(JSON_PROPERTY_INITIAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitialAmount(Integer initialAmount) {
    this.initialAmount = initialAmount;
  }


  public SubscriptionReq firstChargeTime(Long firstChargeTime) {
    
    this.firstChargeTime = firstChargeTime;
    return this;
  }

   /**
   * 初回支払いUTCタイムスタンプ
   * @return firstChargeTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_CHARGE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFirstChargeTime() {
    return firstChargeTime;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_CHARGE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstChargeTime(Long firstChargeTime) {
    this.firstChargeTime = firstChargeTime;
  }


  public SubscriptionReq metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public SubscriptionReq putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * メタデータ
   * @return metadata
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubscriptionReq subscriptionReq = (SubscriptionReq) o;
    return Objects.equals(this.name, subscriptionReq.name) &&
        Objects.equals(this.customerId, subscriptionReq.customerId) &&
        Objects.equals(this.currency, subscriptionReq.currency) &&
        Objects.equals(this.amount, subscriptionReq.amount) &&
        Objects.equals(this.interval, subscriptionReq.interval) &&
        Objects.equals(this.intervalSpan, subscriptionReq.intervalSpan) &&
        Objects.equals(this.initialAmount, subscriptionReq.initialAmount) &&
        Objects.equals(this.firstChargeTime, subscriptionReq.firstChargeTime) &&
        Objects.equals(this.metadata, subscriptionReq.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, customerId, currency, amount, interval, intervalSpan, initialAmount, firstChargeTime, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubscriptionReq {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    intervalSpan: ").append(toIndentedString(intervalSpan)).append("\n");
    sb.append("    initialAmount: ").append(toIndentedString(initialAmount)).append("\n");
    sb.append("    firstChargeTime: ").append(toIndentedString(firstChargeTime)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `customerId` to the URL query string
    if (getCustomerId() != null) {
      try {
        joiner.add(String.format("%scustomerId%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCustomerId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      try {
        joiner.add(String.format("%scurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      try {
        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `interval` to the URL query string
    if (getInterval() != null) {
      try {
        joiner.add(String.format("%sinterval%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInterval()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `intervalSpan` to the URL query string
    if (getIntervalSpan() != null) {
      try {
        joiner.add(String.format("%sintervalSpan%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getIntervalSpan()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `initialAmount` to the URL query string
    if (getInitialAmount() != null) {
      try {
        joiner.add(String.format("%sinitialAmount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitialAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `firstChargeTime` to the URL query string
    if (getFirstChargeTime() != null) {
      try {
        joiner.add(String.format("%sfirstChargeTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFirstChargeTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

