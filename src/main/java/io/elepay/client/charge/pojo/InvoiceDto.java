/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.client.charge.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.elepay.client.charge.pojo.CustomerDto;
import io.elepay.client.charge.pojo.InvoiceItem;
import io.elepay.client.charge.pojo.InvoiceStatusType;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * インボイスオブジェクト
 */
@JsonPropertyOrder({
  InvoiceDto.JSON_PROPERTY_ID,
  InvoiceDto.JSON_PROPERTY_OBJECT,
  InvoiceDto.JSON_PROPERTY_LIVE_MODE,
  InvoiceDto.JSON_PROPERTY_CUSTOMER,
  InvoiceDto.JSON_PROPERTY_INVOICE_NO,
  InvoiceDto.JSON_PROPERTY_NAME,
  InvoiceDto.JSON_PROPERTY_MEMO,
  InvoiceDto.JSON_PROPERTY_AMOUNT,
  InvoiceDto.JSON_PROPERTY_CURRENCY,
  InvoiceDto.JSON_PROPERTY_STATUS,
  InvoiceDto.JSON_PROPERTY_OPERATOR,
  InvoiceDto.JSON_PROPERTY_INVOICE_TIME,
  InvoiceDto.JSON_PROPERTY_SEND_TIME,
  InvoiceDto.JSON_PROPERTY_PAID_TIME,
  InvoiceDto.JSON_PROPERTY_EXPIRY_TIME,
  InvoiceDto.JSON_PROPERTY_CREATE_TIME,
  InvoiceDto.JSON_PROPERTY_FIELDS,
  InvoiceDto.JSON_PROPERTY_ITEMS,
  InvoiceDto.JSON_PROPERTY_REMARK,
  InvoiceDto.JSON_PROPERTY_METADATA
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvoiceDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_OBJECT = "object";
  private String _object = "invoice";

  public static final String JSON_PROPERTY_LIVE_MODE = "liveMode";
  private Boolean liveMode;

  public static final String JSON_PROPERTY_CUSTOMER = "customer";
  private CustomerDto customer;

  public static final String JSON_PROPERTY_INVOICE_NO = "invoiceNo";
  private String invoiceNo;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_MEMO = "memo";
  private String memo;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Integer amount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency = "JPY";

  public static final String JSON_PROPERTY_STATUS = "status";
  private InvoiceStatusType status;

  public static final String JSON_PROPERTY_OPERATOR = "operator";
  private String operator;

  public static final String JSON_PROPERTY_INVOICE_TIME = "invoiceTime";
  private Long invoiceTime;

  public static final String JSON_PROPERTY_SEND_TIME = "sendTime";
  private Long sendTime;

  public static final String JSON_PROPERTY_PAID_TIME = "paidTime";
  private Long paidTime;

  public static final String JSON_PROPERTY_EXPIRY_TIME = "expiryTime";
  private Long expiryTime;

  public static final String JSON_PROPERTY_CREATE_TIME = "createTime";
  private Long createTime;

  public static final String JSON_PROPERTY_FIELDS = "fields";
  private List<String> fields;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<InvoiceItem> items;

  public static final String JSON_PROPERTY_REMARK = "remark";
  private String remark;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Map<String, String> metadata = new HashMap<>();

  public InvoiceDto() {
  }

  public InvoiceDto id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * Invoice ID
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public InvoiceDto _object(String _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * 対象種類の表記
   * @return _object
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setObject(String _object) {
    this._object = _object;
  }


  public InvoiceDto liveMode(Boolean liveMode) {
    
    this.liveMode = liveMode;
    return this;
  }

   /**
   * 本番モードかどうか - false テストモード - true 本番モード 
   * @return liveMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIVE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLiveMode() {
    return liveMode;
  }


  @JsonProperty(JSON_PROPERTY_LIVE_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiveMode(Boolean liveMode) {
    this.liveMode = liveMode;
  }


  public InvoiceDto customer(CustomerDto customer) {
    
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CustomerDto getCustomer() {
    return customer;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomer(CustomerDto customer) {
    this.customer = customer;
  }


  public InvoiceDto invoiceNo(String invoiceNo) {
    
    this.invoiceNo = invoiceNo;
    return this;
  }

   /**
   * Invoice Number
   * @return invoiceNo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceNo() {
    return invoiceNo;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceNo(String invoiceNo) {
    this.invoiceNo = invoiceNo;
  }


  public InvoiceDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * インバイス件名
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public InvoiceDto memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * インバイスメモ
   * @return memo
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMemo() {
    return memo;
  }


  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemo(String memo) {
    this.memo = memo;
  }


  public InvoiceDto amount(Integer amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * 支払い金額
   * @return amount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Integer amount) {
    this.amount = amount;
  }


  public InvoiceDto currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * 通貨コード (ISO_4217)
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public InvoiceDto status(InvoiceStatusType status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvoiceStatusType getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(InvoiceStatusType status) {
    this.status = status;
  }


  public InvoiceDto operator(String operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * 操作者
   * @return operator
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOperator() {
    return operator;
  }


  @JsonProperty(JSON_PROPERTY_OPERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOperator(String operator) {
    this.operator = operator;
  }


  public InvoiceDto invoiceTime(Long invoiceTime) {
    
    this.invoiceTime = invoiceTime;
    return this;
  }

   /**
   * 請求日のUTCタイムスタンプ
   * @return invoiceTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getInvoiceTime() {
    return invoiceTime;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceTime(Long invoiceTime) {
    this.invoiceTime = invoiceTime;
  }


  public InvoiceDto sendTime(Long sendTime) {
    
    this.sendTime = sendTime;
    return this;
  }

   /**
   * 送信時間のUTCタイムスタンプ
   * @return sendTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getSendTime() {
    return sendTime;
  }


  @JsonProperty(JSON_PROPERTY_SEND_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendTime(Long sendTime) {
    this.sendTime = sendTime;
  }


  public InvoiceDto paidTime(Long paidTime) {
    
    this.paidTime = paidTime;
    return this;
  }

   /**
   * 支払い時間のUTCタイムスタンプ
   * @return paidTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAID_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPaidTime() {
    return paidTime;
  }


  @JsonProperty(JSON_PROPERTY_PAID_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaidTime(Long paidTime) {
    this.paidTime = paidTime;
  }


  public InvoiceDto expiryTime(Long expiryTime) {
    
    this.expiryTime = expiryTime;
    return this;
  }

   /**
   * 支払い請求有効時間のUTCタイムスタンプ
   * @return expiryTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getExpiryTime() {
    return expiryTime;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRY_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiryTime(Long expiryTime) {
    this.expiryTime = expiryTime;
  }


  public InvoiceDto createTime(Long createTime) {
    
    this.createTime = createTime;
    return this;
  }

   /**
   * 作成UTCタイムスタンプ
   * @return createTime
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreateTime() {
    return createTime;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateTime(Long createTime) {
    this.createTime = createTime;
  }


  public InvoiceDto fields(List<String> fields) {
    
    this.fields = fields;
    return this;
  }

  public InvoiceDto addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * インボイスフィールドリスト
   * @return fields
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getFields() {
    return fields;
  }


  @JsonProperty(JSON_PROPERTY_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFields(List<String> fields) {
    this.fields = fields;
  }


  public InvoiceDto items(List<InvoiceItem> items) {
    
    this.items = items;
    return this;
  }

  public InvoiceDto addItemsItem(InvoiceItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * インボイスアイテムリスト
   * @return items
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InvoiceItem> getItems() {
    return items;
  }


  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(List<InvoiceItem> items) {
    this.items = items;
  }


  public InvoiceDto remark(String remark) {
    
    this.remark = remark;
    return this;
  }

   /**
   * 追加説明
   * @return remark
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemark() {
    return remark;
  }


  @JsonProperty(JSON_PROPERTY_REMARK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemark(String remark) {
    this.remark = remark;
  }


  public InvoiceDto metadata(Map<String, String> metadata) {
    
    this.metadata = metadata;
    return this;
  }

  public InvoiceDto putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

   /**
   * メタデータ
   * @return metadata
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceDto invoiceDto = (InvoiceDto) o;
    return Objects.equals(this.id, invoiceDto.id) &&
        Objects.equals(this._object, invoiceDto._object) &&
        Objects.equals(this.liveMode, invoiceDto.liveMode) &&
        Objects.equals(this.customer, invoiceDto.customer) &&
        Objects.equals(this.invoiceNo, invoiceDto.invoiceNo) &&
        Objects.equals(this.name, invoiceDto.name) &&
        Objects.equals(this.memo, invoiceDto.memo) &&
        Objects.equals(this.amount, invoiceDto.amount) &&
        Objects.equals(this.currency, invoiceDto.currency) &&
        Objects.equals(this.status, invoiceDto.status) &&
        Objects.equals(this.operator, invoiceDto.operator) &&
        Objects.equals(this.invoiceTime, invoiceDto.invoiceTime) &&
        Objects.equals(this.sendTime, invoiceDto.sendTime) &&
        Objects.equals(this.paidTime, invoiceDto.paidTime) &&
        Objects.equals(this.expiryTime, invoiceDto.expiryTime) &&
        Objects.equals(this.createTime, invoiceDto.createTime) &&
        Objects.equals(this.fields, invoiceDto.fields) &&
        Objects.equals(this.items, invoiceDto.items) &&
        Objects.equals(this.remark, invoiceDto.remark) &&
        Objects.equals(this.metadata, invoiceDto.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, _object, liveMode, customer, invoiceNo, name, memo, amount, currency, status, operator, invoiceTime, sendTime, paidTime, expiryTime, createTime, fields, items, remark, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    liveMode: ").append(toIndentedString(liveMode)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    invoiceNo: ").append(toIndentedString(invoiceNo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    invoiceTime: ").append(toIndentedString(invoiceTime)).append("\n");
    sb.append("    sendTime: ").append(toIndentedString(sendTime)).append("\n");
    sb.append("    paidTime: ").append(toIndentedString(paidTime)).append("\n");
    sb.append("    expiryTime: ").append(toIndentedString(expiryTime)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    remark: ").append(toIndentedString(remark)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `object` to the URL query string
    if (getObject() != null) {
      try {
        joiner.add(String.format("%sobject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getObject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `liveMode` to the URL query string
    if (getLiveMode() != null) {
      try {
        joiner.add(String.format("%sliveMode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLiveMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `customer` to the URL query string
    if (getCustomer() != null) {
      joiner.add(getCustomer().toUrlQueryString(prefix + "customer" + suffix));
    }

    // add `invoiceNo` to the URL query string
    if (getInvoiceNo() != null) {
      try {
        joiner.add(String.format("%sinvoiceNo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceNo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `name` to the URL query string
    if (getName() != null) {
      try {
        joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getName()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `memo` to the URL query string
    if (getMemo() != null) {
      try {
        joiner.add(String.format("%smemo%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMemo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `amount` to the URL query string
    if (getAmount() != null) {
      try {
        joiner.add(String.format("%samount%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAmount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `currency` to the URL query string
    if (getCurrency() != null) {
      try {
        joiner.add(String.format("%scurrency%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCurrency()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `operator` to the URL query string
    if (getOperator() != null) {
      try {
        joiner.add(String.format("%soperator%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOperator()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `invoiceTime` to the URL query string
    if (getInvoiceTime() != null) {
      try {
        joiner.add(String.format("%sinvoiceTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInvoiceTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `sendTime` to the URL query string
    if (getSendTime() != null) {
      try {
        joiner.add(String.format("%ssendTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSendTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `paidTime` to the URL query string
    if (getPaidTime() != null) {
      try {
        joiner.add(String.format("%spaidTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPaidTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `expiryTime` to the URL query string
    if (getExpiryTime() != null) {
      try {
        joiner.add(String.format("%sexpiryTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getExpiryTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `createTime` to the URL query string
    if (getCreateTime() != null) {
      try {
        joiner.add(String.format("%screateTime%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreateTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `fields` to the URL query string
    if (getFields() != null) {
      for (int i = 0; i < getFields().size(); i++) {
        try {
          joiner.add(String.format("%sfields%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getFields().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `items` to the URL query string
    if (getItems() != null) {
      for (int i = 0; i < getItems().size(); i++) {
        if (getItems().get(i) != null) {
          joiner.add(getItems().get(i).toUrlQueryString(String.format("%sitems%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `remark` to the URL query string
    if (getRemark() != null) {
      try {
        joiner.add(String.format("%sremark%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRemark()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      for (String _key : getMetadata().keySet()) {
        try {
          joiner.add(String.format("%smetadata%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getMetadata().get(_key), URLEncoder.encode(String.valueOf(getMetadata().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    return joiner.toString();
  }

}

