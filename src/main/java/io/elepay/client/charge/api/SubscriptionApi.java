/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.SubscriptionDto;
import io.elepay.client.charge.pojo.SubscriptionPeriodsResponse;
import io.elepay.client.charge.pojo.SubscriptionReq;
import io.elepay.client.charge.pojo.SubscriptionStatusType;
import io.elepay.client.charge.pojo.SubscriptionUpdateReq;
import io.elepay.client.charge.pojo.SubscriptionsResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SubscriptionApi {


  private ApiClient apiClient;

  public SubscriptionApi() {
    this(Configuration.getDefaultApiClient());
  }

  public SubscriptionApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Cancel subscription
   * 定期課金をキャンセルし、現在の周期の終了日をもって定期課金を終了させます。 キャンセルした定期課金は再スタートできません。 処理中の定期課金はキャンセルできません。 
   * @param subscriptionId Subscription ID (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto cancelSubscription(String subscriptionId) throws ApiException {
    return this.cancelSubscription(subscriptionId, Collections.emptyMap());
  }


  /**
   * Cancel subscription
   * 定期課金をキャンセルし、現在の周期の終了日をもって定期課金を終了させます。 キャンセルした定期課金は再スタートできません。 処理中の定期課金はキャンセルできません。 
   * @param subscriptionId Subscription ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto cancelSubscription(String subscriptionId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling cancelSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}/cancel"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create subscription
   * 定期課金を作成します。
   * @param subscriptionReq  (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto createSubscription(SubscriptionReq subscriptionReq) throws ApiException {
    return this.createSubscription(subscriptionReq, Collections.emptyMap());
  }


  /**
   * Create subscription
   * 定期課金を作成します。
   * @param subscriptionReq  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto createSubscription(SubscriptionReq subscriptionReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = subscriptionReq;
    
    // verify the required parameter 'subscriptionReq' is set
    if (subscriptionReq == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionReq' when calling createSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List subscription periods
   * 定期課金の周期情報をリストで取得します。
   * @param subscriptionId Subscription ID (required)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return SubscriptionPeriodsResponse
   * @throws ApiException if fails to make API call
   */
  public SubscriptionPeriodsResponse listSubscriptionPeriods(String subscriptionId, Integer limit, Integer offset) throws ApiException {
    return this.listSubscriptionPeriods(subscriptionId, limit, offset, Collections.emptyMap());
  }


  /**
   * List subscription periods
   * 定期課金の周期情報をリストで取得します。
   * @param subscriptionId Subscription ID (required)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionPeriodsResponse
   * @throws ApiException if fails to make API call
   */
  public SubscriptionPeriodsResponse listSubscriptionPeriods(String subscriptionId, Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling listSubscriptionPeriods");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}/periods"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionPeriodsResponse> localVarReturnType = new TypeReference<SubscriptionPeriodsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List subscriptions
   * 定期課金を一覧で取得します。
   * @param customerId Customer ID (optional)
   * @param from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
   * @param to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
   * @param status 定期課金ステータス (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return SubscriptionsResponse
   * @throws ApiException if fails to make API call
   */
  public SubscriptionsResponse listSubscriptions(String customerId, Long from, Long to, SubscriptionStatusType status, Integer limit, Integer offset) throws ApiException {
    return this.listSubscriptions(customerId, from, to, status, limit, offset, Collections.emptyMap());
  }


  /**
   * List subscriptions
   * 定期課金を一覧で取得します。
   * @param customerId Customer ID (optional)
   * @param from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
   * @param to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
   * @param status 定期課金ステータス (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionsResponse
   * @throws ApiException if fails to make API call
   */
  public SubscriptionsResponse listSubscriptions(String customerId, Long from, Long to, SubscriptionStatusType status, Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/subscriptions";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("customerId", customerId));
    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionsResponse> localVarReturnType = new TypeReference<SubscriptionsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Resume subscription
   * 延滞中(status&#x3D;past_due)の定期課金を再開させます。 
   * @param subscriptionId Subscription ID (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto resumeSubscription(String subscriptionId) throws ApiException {
    return this.resumeSubscription(subscriptionId, Collections.emptyMap());
  }


  /**
   * Resume subscription
   * 延滞中(status&#x3D;past_due)の定期課金を再開させます。 
   * @param subscriptionId Subscription ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto resumeSubscription(String subscriptionId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling resumeSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}/resume"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve subscription
   * 定期課金情報を取得します。
   * @param subscriptionId Subscription ID (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto retrieveSubscription(String subscriptionId) throws ApiException {
    return this.retrieveSubscription(subscriptionId, Collections.emptyMap());
  }


  /**
   * Retrieve subscription
   * 定期課金情報を取得します。
   * @param subscriptionId Subscription ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto retrieveSubscription(String subscriptionId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling retrieveSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Start subscription
   * 新規(status&#x3D;new)の定期課金を開始させます。 
   * @param subscriptionId Subscription ID (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto startSubscription(String subscriptionId) throws ApiException {
    return this.startSubscription(subscriptionId, Collections.emptyMap());
  }


  /**
   * Start subscription
   * 新規(status&#x3D;new)の定期課金を開始させます。 
   * @param subscriptionId Subscription ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto startSubscription(String subscriptionId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling startSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}/start"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update subscription
   * 定期課金を更新します。
   * @param subscriptionId Subscription ID (required)
   * @param subscriptionUpdateReq  (required)
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto updateSubscription(String subscriptionId, SubscriptionUpdateReq subscriptionUpdateReq) throws ApiException {
    return this.updateSubscription(subscriptionId, subscriptionUpdateReq, Collections.emptyMap());
  }


  /**
   * Update subscription
   * 定期課金を更新します。
   * @param subscriptionId Subscription ID (required)
   * @param subscriptionUpdateReq  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SubscriptionDto
   * @throws ApiException if fails to make API call
   */
  public SubscriptionDto updateSubscription(String subscriptionId, SubscriptionUpdateReq subscriptionUpdateReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = subscriptionUpdateReq;
    
    // verify the required parameter 'subscriptionId' is set
    if (subscriptionId == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionId' when calling updateSubscription");
    }
    
    // verify the required parameter 'subscriptionUpdateReq' is set
    if (subscriptionUpdateReq == null) {
      throw new ApiException(400, "Missing the required parameter 'subscriptionUpdateReq' when calling updateSubscription");
    }
    
    // create path and map variables
    String localVarPath = "/subscriptions/{subscriptionId}"
      .replaceAll("\\{" + "subscriptionId" + "\\}", apiClient.escapeString(subscriptionId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SubscriptionDto> localVarReturnType = new TypeReference<SubscriptionDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
