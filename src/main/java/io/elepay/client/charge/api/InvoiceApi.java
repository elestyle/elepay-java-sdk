/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.InvoiceDto;
import io.elepay.client.charge.pojo.InvoiceReq;
import io.elepay.client.charge.pojo.InvoiceStatusType;
import io.elepay.client.charge.pojo.InvoicesResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class InvoiceApi {


  private ApiClient apiClient;

  public InvoiceApi() {
    this(Configuration.getDefaultApiClient());
  }

  public InvoiceApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Cancel invoice
   * インボイスを中止します。
   * @param invoiceId Invoice ID (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto cancelInvoice(String invoiceId) throws ApiException {
    return this.cancelInvoice(invoiceId, Collections.emptyMap());
  }


  /**
   * Cancel invoice
   * インボイスを中止します。
   * @param invoiceId Invoice ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto cancelInvoice(String invoiceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invoiceId' is set
    if (invoiceId == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceId' when calling cancelInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices/{invoiceId}/cancel"
      .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create invoice
   * インボイスを作成します。
   * @param invoiceReq インボイスリクエスト (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto createInvoice(InvoiceReq invoiceReq) throws ApiException {
    return this.createInvoice(invoiceReq, Collections.emptyMap());
  }


  /**
   * Create invoice
   * インボイスを作成します。
   * @param invoiceReq インボイスリクエスト (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto createInvoice(InvoiceReq invoiceReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invoiceReq;
    
    // verify the required parameter 'invoiceReq' is set
    if (invoiceReq == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceReq' when calling createInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List invoices
   * インボイス情報を一覧で取得します。
   * @param keyword キーワード (optional)
   * @param from dateRange from (optional)
   * @param to dateRange from (optional)
   * @param status status (optional
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return InvoicesResponse
   * @throws ApiException if fails to make API call
   */
  public InvoicesResponse listInvoices(String keyword, Long from, Long to, List<InvoiceStatusType> status, Integer limit, Integer offset) throws ApiException {
    return this.listInvoices(keyword, from, to, status, limit, offset, Collections.emptyMap());
  }


  /**
   * List invoices
   * インボイス情報を一覧で取得します。
   * @param keyword キーワード (optional)
   * @param from dateRange from (optional)
   * @param to dateRange from (optional)
   * @param status status (optional
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoicesResponse
   * @throws ApiException if fails to make API call
   */
  public InvoicesResponse listInvoices(String keyword, Long from, Long to, List<InvoiceStatusType> status, Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/invoices";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("keyword", keyword));
    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoicesResponse> localVarReturnType = new TypeReference<InvoicesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve invoice
   * インボイス情報を取得します。
   * @param invoiceId Invoice ID (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto retrieveInvoice(String invoiceId) throws ApiException {
    return this.retrieveInvoice(invoiceId, Collections.emptyMap());
  }


  /**
   * Retrieve invoice
   * インボイス情報を取得します。
   * @param invoiceId Invoice ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto retrieveInvoice(String invoiceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invoiceId' is set
    if (invoiceId == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceId' when calling retrieveInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices/{invoiceId}"
      .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * send invoice
   * インボイスを送信します。
   * @param invoiceId invoice id (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto sendInvoice(String invoiceId) throws ApiException {
    return this.sendInvoice(invoiceId, Collections.emptyMap());
  }


  /**
   * send invoice
   * インボイスを送信します。
   * @param invoiceId invoice id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto sendInvoice(String invoiceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invoiceId' is set
    if (invoiceId == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceId' when calling sendInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices/{invoiceId}/send"
      .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Submit invoice
   * インボイスを確定します。
   * @param invoiceId Invoice ID (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto submitInvoice(String invoiceId) throws ApiException {
    return this.submitInvoice(invoiceId, Collections.emptyMap());
  }


  /**
   * Submit invoice
   * インボイスを確定します。
   * @param invoiceId Invoice ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto submitInvoice(String invoiceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'invoiceId' is set
    if (invoiceId == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceId' when calling submitInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices/{invoiceId}/submit"
      .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update invoice
   * インボイス情報を更新します。
   * @param invoiceId Invoice ID (required)
   * @param invoiceReq インボイスリクエスト (required)
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto updateInvoice(String invoiceId, InvoiceReq invoiceReq) throws ApiException {
    return this.updateInvoice(invoiceId, invoiceReq, Collections.emptyMap());
  }


  /**
   * Update invoice
   * インボイス情報を更新します。
   * @param invoiceId Invoice ID (required)
   * @param invoiceReq インボイスリクエスト (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return InvoiceDto
   * @throws ApiException if fails to make API call
   */
  public InvoiceDto updateInvoice(String invoiceId, InvoiceReq invoiceReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = invoiceReq;
    
    // verify the required parameter 'invoiceId' is set
    if (invoiceId == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceId' when calling updateInvoice");
    }
    
    // verify the required parameter 'invoiceReq' is set
    if (invoiceReq == null) {
      throw new ApiException(400, "Missing the required parameter 'invoiceReq' when calling updateInvoice");
    }
    
    // create path and map variables
    String localVarPath = "/invoices/{invoiceId}"
      .replaceAll("\\{" + "invoiceId" + "\\}", apiClient.escapeString(invoiceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<InvoiceDto> localVarReturnType = new TypeReference<InvoiceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
