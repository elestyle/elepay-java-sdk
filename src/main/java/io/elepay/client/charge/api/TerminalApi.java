/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.LocationsResponse;
import io.elepay.client.charge.pojo.TerminalReaderDto;
import io.elepay.client.charge.pojo.TerminalReaderReq;
import io.elepay.client.charge.pojo.TerminalReadersResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TerminalApi {


  private ApiClient apiClient;

  public TerminalApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TerminalApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * create terminal reader
   * 
   * @param terminalReaderReq  (required)
   * @return TerminalReaderDto
   * @throws ApiException if fails to make API call
   */
  public TerminalReaderDto createReader(TerminalReaderReq terminalReaderReq) throws ApiException {
    return this.createReader(terminalReaderReq, Collections.emptyMap());
  }


  /**
   * create terminal reader
   * 
   * @param terminalReaderReq  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TerminalReaderDto
   * @throws ApiException if fails to make API call
   */
  public TerminalReaderDto createReader(TerminalReaderReq terminalReaderReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = terminalReaderReq;
    
    // verify the required parameter 'terminalReaderReq' is set
    if (terminalReaderReq == null) {
      throw new ApiException(400, "Missing the required parameter 'terminalReaderReq' when calling createReader");
    }
    
    // create path and map variables
    String localVarPath = "/terminal/readers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<TerminalReaderDto> localVarReturnType = new TypeReference<TerminalReaderDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * delete reader
   * 
   * @param readerId reader Id (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteReader(String readerId) throws ApiException {
    this.deleteReader(readerId, Collections.emptyMap());
  }


  /**
   * delete reader
   * 
   * @param readerId reader Id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteReader(String readerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'readerId' is set
    if (readerId == null) {
      throw new ApiException(400, "Missing the required parameter 'readerId' when calling deleteReader");
    }
    
    // create path and map variables
    String localVarPath = "/terminal/readers/{readerId}"
      .replaceAll("\\{" + "readerId" + "\\}", apiClient.escapeString(readerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * get reader
   * 
   * @param readerId reader Id (required)
   * @return TerminalReaderDto
   * @throws ApiException if fails to make API call
   */
  public TerminalReaderDto getReader(String readerId) throws ApiException {
    return this.getReader(readerId, Collections.emptyMap());
  }


  /**
   * get reader
   * 
   * @param readerId reader Id (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return TerminalReaderDto
   * @throws ApiException if fails to make API call
   */
  public TerminalReaderDto getReader(String readerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'readerId' is set
    if (readerId == null) {
      throw new ApiException(400, "Missing the required parameter 'readerId' when calling getReader");
    }
    
    // create path and map variables
    String localVarPath = "/terminal/readers/{readerId}"
      .replaceAll("\\{" + "readerId" + "\\}", apiClient.escapeString(readerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<TerminalReaderDto> localVarReturnType = new TypeReference<TerminalReaderDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * list locations
   * 
   * @return LocationsResponse
   * @throws ApiException if fails to make API call
   */
  public LocationsResponse listLocations() throws ApiException {
    return this.listLocations(Collections.emptyMap());
  }


  /**
   * list locations
   * 
   * @param additionalHeaders additionalHeaders for this call
   * @return LocationsResponse
   * @throws ApiException if fails to make API call
   */
  public LocationsResponse listLocations(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/terminal/locations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<LocationsResponse> localVarReturnType = new TypeReference<LocationsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * list readers
   * 
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return TerminalReadersResponse
   * @throws ApiException if fails to make API call
   */
  public TerminalReadersResponse listReaders(Integer limit, Integer offset) throws ApiException {
    return this.listReaders(limit, offset, Collections.emptyMap());
  }


  /**
   * list readers
   * 
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return TerminalReadersResponse
   * @throws ApiException if fails to make API call
   */
  public TerminalReadersResponse listReaders(Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/terminal/readers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<TerminalReadersResponse> localVarReturnType = new TypeReference<TerminalReadersResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
