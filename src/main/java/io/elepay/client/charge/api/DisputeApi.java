/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.DisputeDateTimeType;
import io.elepay.client.charge.pojo.DisputeDto;
import io.elepay.client.charge.pojo.DisputeStatusType;
import io.elepay.client.charge.pojo.DisputesResponse;
import io.elepay.client.charge.pojo.SortOrderType;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DisputeApi {


  private ApiClient apiClient;

  public DisputeApi() {
    this(Configuration.getDefaultApiClient());
  }

  public DisputeApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * List disputes
   * 不審請求情報を一覧で取得します
   * @param chargeId Charge ID (optional)
   * @param from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
   * @param to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
   * @param dateField 開始時間と終了時間の項目を指定します。 - resolved_time 不審請求解決時間 - create_time 不審請求発生時間  (optional, default to create_time)
   * @param status 不審請求ステータス (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param sort ソート項目 - resolved_time 不審請求解決時間 - create_time 決済新規時間  (optional, default to create_time)
   * @param order ソート順 - desc 降順 - asc 昇順  (optional, default to desc)
   * @return DisputesResponse
   * @throws ApiException if fails to make API call
   */
  public DisputesResponse listDisputes(String chargeId, Long from, Long to, DisputeDateTimeType dateField, DisputeStatusType status, Integer limit, Integer offset, DisputeDateTimeType sort, SortOrderType order) throws ApiException {
    return this.listDisputes(chargeId, from, to, dateField, status, limit, offset, sort, order, Collections.emptyMap());
  }


  /**
   * List disputes
   * 不審請求情報を一覧で取得します
   * @param chargeId Charge ID (optional)
   * @param from 開始時間（UTC）。指定した時間以降に作成されたデータを取得します。 (optional)
   * @param to 終了時間（UTC）。指定した時間以前に作成されたデータを取得します (optional)
   * @param dateField 開始時間と終了時間の項目を指定します。 - resolved_time 不審請求解決時間 - create_time 不審請求発生時間  (optional, default to create_time)
   * @param status 不審請求ステータス (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param sort ソート項目 - resolved_time 不審請求解決時間 - create_time 決済新規時間  (optional, default to create_time)
   * @param order ソート順 - desc 降順 - asc 昇順  (optional, default to desc)
   * @param additionalHeaders additionalHeaders for this call
   * @return DisputesResponse
   * @throws ApiException if fails to make API call
   */
  public DisputesResponse listDisputes(String chargeId, Long from, Long to, DisputeDateTimeType dateField, DisputeStatusType status, Integer limit, Integer offset, DisputeDateTimeType sort, SortOrderType order, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/disputes";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("chargeId", chargeId));
    localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
    localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
    localVarQueryParams.addAll(apiClient.parameterToPair("dateField", dateField));
    localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
    localVarQueryParams.addAll(apiClient.parameterToPair("order", order));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DisputesResponse> localVarReturnType = new TypeReference<DisputesResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve dispute
   * 不審請求に関する詳細情報を取得します。
   * @param id Dispute ID (required)
   * @return DisputeDto
   * @throws ApiException if fails to make API call
   */
  public DisputeDto retrieveDispute(String id) throws ApiException {
    return this.retrieveDispute(id, Collections.emptyMap());
  }


  /**
   * Retrieve dispute
   * 不審請求に関する詳細情報を取得します。
   * @param id Dispute ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return DisputeDto
   * @throws ApiException if fails to make API call
   */
  public DisputeDto retrieveDispute(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveDispute");
    }
    
    // create path and map variables
    String localVarPath = "/disputes/{id}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<DisputeDto> localVarReturnType = new TypeReference<DisputeDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
