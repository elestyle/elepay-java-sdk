/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.CodePaymentMethodResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CodeSettingApi {


  private ApiClient apiClient;

  public CodeSettingApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CodeSettingApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * List all enabled EasyQR payment methods
   * EasyQR利用できる決済方法を取得します。
   * @return CodePaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public CodePaymentMethodResponse listCodePaymentMethods() throws ApiException {
    return this.listCodePaymentMethods(Collections.emptyMap());
  }


  /**
   * List all enabled EasyQR payment methods
   * EasyQR利用できる決済方法を取得します。
   * @param additionalHeaders additionalHeaders for this call
   * @return CodePaymentMethodResponse
   * @throws ApiException if fails to make API call
   */
  public CodePaymentMethodResponse listCodePaymentMethods(Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/code-setting/payment-methods";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CodePaymentMethodResponse> localVarReturnType = new TypeReference<CodePaymentMethodResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
