/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.RefundDto;
import io.elepay.client.charge.pojo.RefundReq;
import io.elepay.client.charge.pojo.RefundsResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RefundApi {


  private ApiClient apiClient;

  public RefundApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RefundApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create refund
   * 決済の全額あるいは一部の返金処理を行います。
   * @param id Charge ID (required)
   * @param refundReq 返金の詳細情報 (required)
   * @return RefundDto
   * @throws ApiException if fails to make API call
   */
  public RefundDto createRefund(String id, RefundReq refundReq) throws ApiException {
    return this.createRefund(id, refundReq, Collections.emptyMap());
  }


  /**
   * Create refund
   * 決済の全額あるいは一部の返金処理を行います。
   * @param id Charge ID (required)
   * @param refundReq 返金の詳細情報 (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundDto
   * @throws ApiException if fails to make API call
   */
  public RefundDto createRefund(String id, RefundReq refundReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = refundReq;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling createRefund");
    }
    
    // verify the required parameter 'refundReq' is set
    if (refundReq == null) {
      throw new ApiException(400, "Missing the required parameter 'refundReq' when calling createRefund");
    }
    
    // create path and map variables
    String localVarPath = "/charges/{id}/refunds"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<RefundDto> localVarReturnType = new TypeReference<RefundDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List refunds
   * 返金に関する情報を一覧で取得します。
   * @param id Charge ID (required)
   * @return RefundsResponse
   * @throws ApiException if fails to make API call
   */
  public RefundsResponse listChargesRefunds(String id) throws ApiException {
    return this.listChargesRefunds(id, Collections.emptyMap());
  }


  /**
   * List refunds
   * 返金に関する情報を一覧で取得します。
   * @param id Charge ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundsResponse
   * @throws ApiException if fails to make API call
   */
  public RefundsResponse listChargesRefunds(String id, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling listChargesRefunds");
    }
    
    // create path and map variables
    String localVarPath = "/charges/{id}/refunds"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<RefundsResponse> localVarReturnType = new TypeReference<RefundsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve refund
   * 返金に関する詳細情報を取得します。
   * @param id Charge ID (required)
   * @param refundId Refund ID (required)
   * @return RefundDto
   * @throws ApiException if fails to make API call
   */
  public RefundDto retrieveChargeRefund(String id, String refundId) throws ApiException {
    return this.retrieveChargeRefund(id, refundId, Collections.emptyMap());
  }


  /**
   * Retrieve refund
   * 返金に関する詳細情報を取得します。
   * @param id Charge ID (required)
   * @param refundId Refund ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return RefundDto
   * @throws ApiException if fails to make API call
   */
  public RefundDto retrieveChargeRefund(String id, String refundId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling retrieveChargeRefund");
    }
    
    // verify the required parameter 'refundId' is set
    if (refundId == null) {
      throw new ApiException(400, "Missing the required parameter 'refundId' when calling retrieveChargeRefund");
    }
    
    // create path and map variables
    String localVarPath = "/charges/{id}/refunds/{refundId}"
      .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
      .replaceAll("\\{" + "refundId" + "\\}", apiClient.escapeString(refundId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<RefundDto> localVarReturnType = new TypeReference<RefundDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
