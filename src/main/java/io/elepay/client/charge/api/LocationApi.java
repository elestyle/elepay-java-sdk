/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.ChargeLocationDto;
import io.elepay.client.charge.pojo.ChargeLocationReq;
import io.elepay.client.charge.pojo.ChargeLocationUpdateReq;
import io.elepay.client.charge.pojo.ChargeLocationsResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LocationApi {


  private ApiClient apiClient;

  public LocationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public LocationApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create location
   * ロケーション情報を作成します。
   * @param chargeLocationReq  (optional)
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto createChargeLocation(ChargeLocationReq chargeLocationReq) throws ApiException {
    return this.createChargeLocation(chargeLocationReq, Collections.emptyMap());
  }


  /**
   * Create location
   * ロケーション情報を作成します。
   * @param chargeLocationReq  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto createChargeLocation(ChargeLocationReq chargeLocationReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = chargeLocationReq;
    
    // create path and map variables
    String localVarPath = "/locations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ChargeLocationDto> localVarReturnType = new TypeReference<ChargeLocationDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete location
   * ロケーション情報を削除します
   * @param locationId Location ID (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteChargeLocation(String locationId) throws ApiException {
    this.deleteChargeLocation(locationId, Collections.emptyMap());
  }


  /**
   * Delete location
   * ロケーション情報を削除します
   * @param locationId Location ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteChargeLocation(String locationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'locationId' is set
    if (locationId == null) {
      throw new ApiException(400, "Missing the required parameter 'locationId' when calling deleteChargeLocation");
    }
    
    // create path and map variables
    String localVarPath = "/locations/{locationId}"
      .replaceAll("\\{" + "locationId" + "\\}", apiClient.escapeString(locationId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * List locations
   * ロケーション情報を一覧で取得します。
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return ChargeLocationsResponse
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationsResponse listChargeLocations(Integer limit, Integer offset) throws ApiException {
    return this.listChargeLocations(limit, offset, Collections.emptyMap());
  }


  /**
   * List locations
   * ロケーション情報を一覧で取得します。
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return ChargeLocationsResponse
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationsResponse listChargeLocations(Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/locations";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ChargeLocationsResponse> localVarReturnType = new TypeReference<ChargeLocationsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve location
   * ロケーション情報を取得します。
   * @param locationId Location ID (required)
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto retrieveChargeLocation(String locationId) throws ApiException {
    return this.retrieveChargeLocation(locationId, Collections.emptyMap());
  }


  /**
   * Retrieve location
   * ロケーション情報を取得します。
   * @param locationId Location ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto retrieveChargeLocation(String locationId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'locationId' is set
    if (locationId == null) {
      throw new ApiException(400, "Missing the required parameter 'locationId' when calling retrieveChargeLocation");
    }
    
    // create path and map variables
    String localVarPath = "/locations/{locationId}"
      .replaceAll("\\{" + "locationId" + "\\}", apiClient.escapeString(locationId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ChargeLocationDto> localVarReturnType = new TypeReference<ChargeLocationDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update location
   * ロケーション情報を更新します。
   * @param locationId Location ID (required)
   * @param chargeLocationUpdateReq  (required)
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto updateChargeLocation(String locationId, ChargeLocationUpdateReq chargeLocationUpdateReq) throws ApiException {
    return this.updateChargeLocation(locationId, chargeLocationUpdateReq, Collections.emptyMap());
  }


  /**
   * Update location
   * ロケーション情報を更新します。
   * @param locationId Location ID (required)
   * @param chargeLocationUpdateReq  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return ChargeLocationDto
   * @throws ApiException if fails to make API call
   */
  public ChargeLocationDto updateChargeLocation(String locationId, ChargeLocationUpdateReq chargeLocationUpdateReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = chargeLocationUpdateReq;
    
    // verify the required parameter 'locationId' is set
    if (locationId == null) {
      throw new ApiException(400, "Missing the required parameter 'locationId' when calling updateChargeLocation");
    }
    
    // verify the required parameter 'chargeLocationUpdateReq' is set
    if (chargeLocationUpdateReq == null) {
      throw new ApiException(400, "Missing the required parameter 'chargeLocationUpdateReq' when calling updateChargeLocation");
    }
    
    // create path and map variables
    String localVarPath = "/locations/{locationId}"
      .replaceAll("\\{" + "locationId" + "\\}", apiClient.escapeString(locationId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<ChargeLocationDto> localVarReturnType = new TypeReference<ChargeLocationDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
