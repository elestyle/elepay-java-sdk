/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。
 *
 * The version of the OpenAPI document: 1.2.5
 * Contact: support@elestyle.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.elepay.client.charge.api;

import com.fasterxml.jackson.core.type.TypeReference;

import io.elepay.client.charge.ApiException;
import io.elepay.client.charge.ApiClient;
import io.elepay.client.charge.Configuration;
import io.elepay.client.charge.pojo.*;
import io.elepay.client.charge.Pair;

import io.elepay.client.charge.pojo.CustomerDto;
import io.elepay.client.charge.pojo.CustomerReq;
import io.elepay.client.charge.pojo.CustomerResponse;
import io.elepay.client.charge.pojo.CustomerUpdateReq;
import io.elepay.client.charge.pojo.PaymentMethodType;
import io.elepay.client.charge.pojo.SourceDto;
import io.elepay.client.charge.pojo.SourceReq;
import io.elepay.client.charge.pojo.SourceResponse;
import io.elepay.client.charge.pojo.SourceStatusDto;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CustomerApi {


  private ApiClient apiClient;

  public CustomerApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CustomerApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create customer
   * カスタマを作成します。
   * @param customerReq カスタマリクエスト (required)
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto createCustomer(CustomerReq customerReq) throws ApiException {
    return this.createCustomer(customerReq, Collections.emptyMap());
  }


  /**
   * Create customer
   * カスタマを作成します。
   * @param customerReq カスタマリクエスト (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto createCustomer(CustomerReq customerReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = customerReq;
    
    // verify the required parameter 'customerReq' is set
    if (customerReq == null) {
      throw new ApiException(400, "Missing the required parameter 'customerReq' when calling createCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CustomerDto> localVarReturnType = new TypeReference<CustomerDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Create source
   * カスタマソースを作成します。
   * @param customerId Customer ID (required)
   * @param sourceReq カスタマソースリクエスト (required)
   * @return SourceDto
   * @throws ApiException if fails to make API call
   */
  public SourceDto createSource(String customerId, SourceReq sourceReq) throws ApiException {
    return this.createSource(customerId, sourceReq, Collections.emptyMap());
  }


  /**
   * Create source
   * カスタマソースを作成します。
   * @param customerId Customer ID (required)
   * @param sourceReq カスタマソースリクエスト (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SourceDto
   * @throws ApiException if fails to make API call
   */
  public SourceDto createSource(String customerId, SourceReq sourceReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = sourceReq;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling createSource");
    }
    
    // verify the required parameter 'sourceReq' is set
    if (sourceReq == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceReq' when calling createSource");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}/sources"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SourceDto> localVarReturnType = new TypeReference<SourceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Delete customer
   * カスタマを削除します
   * @param customerId Customer ID (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteCustomer(String customerId) throws ApiException {
    this.deleteCustomer(customerId, Collections.emptyMap());
  }


  /**
   * Delete customer
   * カスタマを削除します
   * @param customerId Customer ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteCustomer(String customerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling deleteCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete source
   * カスタマソースを削除します。
   * @param customerId Customer ID (required)
   * @param sourceId Source ID (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteSource(String customerId, String sourceId) throws ApiException {
    this.deleteSource(customerId, sourceId, Collections.emptyMap());
  }


  /**
   * Delete source
   * カスタマソースを削除します。
   * @param customerId Customer ID (required)
   * @param sourceId Source ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void deleteSource(String customerId, String sourceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling deleteSource");
    }
    
    // verify the required parameter 'sourceId' is set
    if (sourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceId' when calling deleteSource");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}/sources/{sourceId}"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()))
      .replaceAll("\\{" + "sourceId" + "\\}", apiClient.escapeString(sourceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    apiClient.invokeAPI(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * List customers
   * カスタマ情報を一覧で取得します。
   * @param keyword キーワード (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @return CustomerResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerResponse listCustomers(String keyword, Integer limit, Integer offset) throws ApiException {
    return this.listCustomers(keyword, limit, offset, Collections.emptyMap());
  }


  /**
   * List customers
   * カスタマ情報を一覧で取得します。
   * @param keyword キーワード (optional)
   * @param limit 最大件数 (optional, default to 20)
   * @param offset 検索開始位置 (optional, default to 0)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerResponse
   * @throws ApiException if fails to make API call
   */
  public CustomerResponse listCustomers(String keyword, Integer limit, Integer offset, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/customers";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("keyword", keyword));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CustomerResponse> localVarReturnType = new TypeReference<CustomerResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List sources by customer ID
   * カスタマソース情報を一覧で取得します。
   * @param customerId Customer ID (required)
   * @param paymentMethod 決済方法 (optional)
   * @return SourceResponse
   * @throws ApiException if fails to make API call
   */
  public SourceResponse listSources(String customerId, PaymentMethodType paymentMethod) throws ApiException {
    return this.listSources(customerId, paymentMethod, Collections.emptyMap());
  }


  /**
   * List sources by customer ID
   * カスタマソース情報を一覧で取得します。
   * @param customerId Customer ID (required)
   * @param paymentMethod 決済方法 (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return SourceResponse
   * @throws ApiException if fails to make API call
   */
  public SourceResponse listSources(String customerId, PaymentMethodType paymentMethod, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling listSources");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}/sources"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("paymentMethod", paymentMethod));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SourceResponse> localVarReturnType = new TypeReference<SourceResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve customer
   * カスタマ情報を取得します。
   * @param customerId Customer ID (required)
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto retrieveCustomer(String customerId) throws ApiException {
    return this.retrieveCustomer(customerId, Collections.emptyMap());
  }


  /**
   * Retrieve customer
   * カスタマ情報を取得します。
   * @param customerId Customer ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto retrieveCustomer(String customerId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling retrieveCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CustomerDto> localVarReturnType = new TypeReference<CustomerDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve source
   * カスタマ情報を取得します。
   * @param customerId Customer ID (required)
   * @param sourceId Source ID (required)
   * @return SourceDto
   * @throws ApiException if fails to make API call
   */
  public SourceDto retrieveSource(String customerId, String sourceId) throws ApiException {
    return this.retrieveSource(customerId, sourceId, Collections.emptyMap());
  }


  /**
   * Retrieve source
   * カスタマ情報を取得します。
   * @param customerId Customer ID (required)
   * @param sourceId Source ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SourceDto
   * @throws ApiException if fails to make API call
   */
  public SourceDto retrieveSource(String customerId, String sourceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling retrieveSource");
    }
    
    // verify the required parameter 'sourceId' is set
    if (sourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceId' when calling retrieveSource");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}/sources/{sourceId}"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()))
      .replaceAll("\\{" + "sourceId" + "\\}", apiClient.escapeString(sourceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SourceDto> localVarReturnType = new TypeReference<SourceDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Retrieve source&#39;s status
   * カスタマソースのステータスに関する詳細情報を取得します。
   * @param sourceId Source ID (required)
   * @return SourceStatusDto
   * @throws ApiException if fails to make API call
   */
  public SourceStatusDto retrieveSourceStatus(String sourceId) throws ApiException {
    return this.retrieveSourceStatus(sourceId, Collections.emptyMap());
  }


  /**
   * Retrieve source&#39;s status
   * カスタマソースのステータスに関する詳細情報を取得します。
   * @param sourceId Source ID (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return SourceStatusDto
   * @throws ApiException if fails to make API call
   */
  public SourceStatusDto retrieveSourceStatus(String sourceId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceId' is set
    if (sourceId == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceId' when calling retrieveSourceStatus");
    }
    
    // create path and map variables
    String localVarPath = "/sources/{sourceId}/status"
      .replaceAll("\\{" + "sourceId" + "\\}", apiClient.escapeString(sourceId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<SourceStatusDto> localVarReturnType = new TypeReference<SourceStatusDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update customer
   * カスタマを更新します。
   * @param customerId Customer ID (required)
   * @param customerUpdateReq カスタマリクエスト (required)
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto updateCustomer(String customerId, CustomerUpdateReq customerUpdateReq) throws ApiException {
    return this.updateCustomer(customerId, customerUpdateReq, Collections.emptyMap());
  }


  /**
   * Update customer
   * カスタマを更新します。
   * @param customerId Customer ID (required)
   * @param customerUpdateReq カスタマリクエスト (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return CustomerDto
   * @throws ApiException if fails to make API call
   */
  public CustomerDto updateCustomer(String customerId, CustomerUpdateReq customerUpdateReq, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = customerUpdateReq;
    
    // verify the required parameter 'customerId' is set
    if (customerId == null) {
      throw new ApiException(400, "Missing the required parameter 'customerId' when calling updateCustomer");
    }
    
    // verify the required parameter 'customerUpdateReq' is set
    if (customerUpdateReq == null) {
      throw new ApiException(400, "Missing the required parameter 'customerUpdateReq' when calling updateCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/customers/{customerId}"
      .replaceAll("\\{" + "customerId" + "\\}", apiClient.escapeString(customerId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json;charset=utf-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=utf-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "basicAuth", "bearerAuth" };

    TypeReference<CustomerDto> localVarReturnType = new TypeReference<CustomerDto>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
