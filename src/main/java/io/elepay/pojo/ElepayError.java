/*
 * elepay API リファレンス
 * elepay APIはRESTをベースに構成された決済APIです。支払い処理、返金処理など、決済に関わる運用における様々なことができます。 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.elepay.pojo;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * エラー情報
 */
@ApiModel(description = "エラー情報")

public class ElepayError {
  /**
   * エラーコードとメッセージ
   */
  public enum TypeEnum {
    NOT_FOUND_ERROR("not_found_error"),
    
    INVALID_REQUEST_ERROR("invalid_request_error"),
    
    CHANNEL_VALIDATION_ERROR("channel_validation_error"),
    
    CHANNEL_ERROR("channel_error"),
    
    PROVIDER_ERROR("provider_error"),
    
    CONNECTION_ERROR("connection_error"),
    
    PROCESS_ERROR("process_error"),
    
    AUTHENTICATION_ERROR("authentication_error"),
    
    FORBIDDEN_ERROR("forbidden_error"),
    
    RATE_LIMIT_ERROR("rate_limit_error"),
    
    API_ERROR("api_error"),
    
    API_CONNECTION_ERROR("api_connection_error");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * エラーコード
   */
  public enum CodeEnum {
    NOT_FOUND("not_found"),
    
    NOT_FOUND_CHARGE("not_found_charge"),
    
    AUTH_INVALID_CREDENTIAL("auth_invalid_credential"),
    
    AUTH_INVALID_PROVIDER("auth_invalid_provider"),
    
    INVALID_REQUEST("invalid_request"),
    
    INVALID_ORDER_NO("invalid_order_no"),
    
    INVALID_PAYMENT_METHOD("invalid_payment_method"),
    
    INVALID_AMOUNT("invalid_amount"),
    
    INVALID_TOKEN("invalid_token"),
    
    INVALID_FRONT_URL("invalid_front_url"),
    
    INVALID_CANCEL_URL("invalid_cancel_url"),
    
    INVALID_CONTRACT_NUMBER("invalid_contract_number"),
    
    INVALID_USERNAME("invalid_username"),
    
    INVALID_EMAIL("invalid_email"),
    
    INVALID_PASSWORD("invalid_password"),
    
    INVALID_ORDER_NO_LENGTH("invalid_order_no_length"),
    
    INVALID_STATUS_CHANGE("invalid_status_change"),
    
    INVALID_STATUS_CHANGE_BY_APP("invalid_status_change_by_app"),
    
    INVALID_STATUS_CHANGE_BY_PROVIDER("invalid_status_change_by_provider"),
    
    INVALID_PROVIDER_UNIQUE_ID("invalid_provider_unique_id"),
    
    INVALID_PROVIDER_CAPTURE_ID("invalid_provider_capture_id"),
    
    INVALID_CHANNEL_GROUP("invalid_channel_group"),
    
    INVALID_BUYER_NAME("invalid_buyer_name"),
    
    INVALID_BUYER_PHONE("invalid_buyer_phone"),
    
    INVALID_BUYER_EMAIL("invalid_buyer_email"),
    
    INVALID_BUYER_ZIP("invalid_buyer_zip"),
    
    INVALID_BUYER_ADDRESS1("invalid_buyer_address1"),
    
    INVALID_BUYER_ADDRESS2("invalid_buyer_address2"),
    
    INVALID_CODE_URL("invalid_code_url"),
    
    INVALID_SHOP_ID("invalid_shop_id"),
    
    INVALID_SHOP_NAME("invalid_shop_name"),
    
    INVALID_SHOP_NO("invalid_shop_no"),
    
    INVALID_PRODUCT_ID("invalid_product_id"),
    
    INVALID_PRODUCT_NAME("invalid_product_name"),
    
    INVALID_PRODUCT_PRICE("invalid_product_price"),
    
    INVALID_PRODUCT_COUNT("invalid_product_count"),
    
    INVALID_SETTING_TYPE("invalid_setting_type"),
    
    INVALID_SETTING_NAME("invalid_setting_name"),
    
    INVALID_CATEGORY_ID("invalid_category_id"),
    
    INVALID_CATEGORY_NAME("invalid_category_name"),
    
    INVALID_ORDER_AMOUNT("invalid_order_amount"),
    
    INVALID_ORDER_AMOUNT_CHANGE("invalid_order_amount_change"),
    
    INVALID_PRODUCT_INACTIVE("invalid_product_inactive"),
    
    INVALID_NAME("invalid_name"),
    
    INVALID_ROLE("invalid_role"),
    
    INVALID_CAMPAIGN_NAME("invalid_campaign_name"),
    
    INVALID_CAMPAIGN_TIME("invalid_campaign_time"),
    
    INVALID_CAMPAIGN_START_TIME("invalid_campaign_start_time"),
    
    INVALID_CAMPAIGN_EXPIRED_TIME("invalid_campaign_expired_time"),
    
    INVALID_CAMPAIGN_DISCOUNT_TYPE("invalid_campaign_discount_type"),
    
    INVALID_CAMPAIGN_DISCOUNT_VALUE("invalid_campaign_discount_value"),
    
    INVALID_CAMPAIGN_CONDITION_TYPE("invalid_campaign_condition_type"),
    
    INVALID_VALUE("invalid_value"),
    
    INVALID_THEME_NAME("invalid_theme_name"),
    
    INVALID_LABEL_NAME("invalid_label_name"),
    
    INVALID_SKU("invalid_sku"),
    
    INVALID_CHARGE("invalid_charge"),
    
    INVALID_FROM("invalid_from"),
    
    INVALID_TO("invalid_to"),
    
    INVALID_EXPORT_DATA_DATE_RANGE("invalid_export_data_date_range"),
    
    INVALID_SECRET_KEY("invalid_secret_key"),
    
    INVALID_AUTH_CODE("invalid_auth_code"),
    
    INVALID_TERMINAL_ID("invalid_terminal_id"),
    
    INVALID_LANG("invalid_lang"),
    
    INVALID_TITLE("invalid_title"),
    
    INVALID_CONTENT("invalid_content"),
    
    INVALID_TYPE("invalid_type"),
    
    INVALID_LEGAL_REGISTRATION_NO("invalid_legal_registration_no"),
    
    INVALID_COUNTRY("invalid_country"),
    
    INVALID_PUBLISH_DATE("invalid_publish_date"),
    
    INVALID_JSON_FORMAT("invalid_json_format"),
    
    INVALID_TITLE_LENGTH("invalid_title_length"),
    
    INVALID_NAME_LENGTH("invalid_name_length"),
    
    INVALID_REF_TYPE_LENGTH("invalid_ref_type_length"),
    
    INVALID_REF_ID_LENGTH("invalid_ref_id_length"),
    
    INVALID_TYPE_LENGTH("invalid_type_length"),
    
    INVALID_DESC_LENGTH("invalid_desc_length"),
    
    INVALID_KEY_LENGTH("invalid_key_length"),
    
    INVALID_CODE_LENGTH("invalid_code_length"),
    
    INVALID_LEGAL_REGISTRATION_NO_LENGTH("invalid_legal_registration_no_length"),
    
    INVALID_ESTABLISHMENT_DATE_LENGTH("invalid_establishment_date_length"),
    
    INVALID_COUNTRY_LENGTH("invalid_country_length"),
    
    INVALID_BANK_CODE_LENGTH("invalid_bank_code_length"),
    
    INVALID_BRANCH_CODE_LENGTH("invalid_branch_code_length"),
    
    INVALID_BANK_ACCOUNT_NUMBER_LENGTH("invalid_bank_account_number_length"),
    
    INVALID_BIRTHDAY_LENGTH("invalid_birthday_length"),
    
    INVALID_EMAIL_LENGTH("invalid_email_length"),
    
    INVALID_ZIP_LENGTH("invalid_zip_length"),
    
    INVALID_TEL_LENGTH("invalid_tel_length"),
    
    INVALID_FAX_LENGTH("invalid_fax_length"),
    
    INVALID_SORT_ORDER_LENGTH("invalid_sort_order_length"),
    
    INVALID_PARKING_RACK_NO("invalid_parking_rack_no"),
    
    INVALID_PARKING_RACK_STATUS("invalid_parking_rack_status"),
    
    INVALID_PARKING_RACK_STATUS_NOT_USED("invalid_parking_rack_status_not_used"),
    
    INVALID_PARKING_RACK_STATUS_OPENED("invalid_parking_rack_status_opened"),
    
    INVALID_PARKING_RACK_STATUS_LOCKED("invalid_parking_rack_status_locked"),
    
    INVALID_PARKING_RACK_STATUS_CONNECT_FAIL("invalid_parking_rack_status_connect_fail"),
    
    INVALID_PARKING_NO_OR_RACK_NO("invalid_parking_no_or_rack_no"),
    
    INVALID_PARKING_PIN_CODE("invalid_parking_pin_code"),
    
    INCORRECT_CURRENCY("incorrect_currency"),
    
    INCORRECT_CARD_NUMBER("incorrect_card_number"),
    
    INCORRECT_AMOUNT("incorrect_amount"),
    
    INCORRECT_MERCHANT_ID("incorrect_merchant_id"),
    
    INCORRECT_PRODUCT_ID("incorrect_product_id"),
    
    INCORRECT_EXPORT_DATA_DATE_RANGE("incorrect_export_data_date_range"),
    
    INCORRECT_STATUS("incorrect_status"),
    
    PROVIDER_RESPONSE_RESULT_FAILED("provider_response_result_failed"),
    
    NO_SUCH_TOKEN("no_such_token"),
    
    DUPLICATE_ORDER_NO("duplicate_order_no"),
    
    DUPLICATE_SHOP_NO("duplicate_shop_no"),
    
    DUPLICATE_CONTRACT_NUMBER("duplicate_contract_number"),
    
    DUPLICATE_EMAIL("duplicate_email"),
    
    DUPLICATE_LEGAL_REGISTRATION_NO("duplicate_legal_registration_no"),
    
    DUPLICATE_KEY("duplicate_key"),
    
    DUPLICATE_CATEGORY_NAME("duplicate_category_name"),
    
    EXPIRED_CARD("expired_card"),
    
    CARD_DECLINED("card_declined"),
    
    PROCESSING_CARD_ERROR("processing_card_error"),
    
    REQUIRED_KEY("required_key"),
    
    CHARGE_ALREADY_CAPTURED("charge_already_captured"),
    
    CHARGE_ALREADY_REFUNDED("charge_already_refunded"),
    
    REFUSED_REFUND("refused_refund"),
    
    REFUSED_REFUND_CONSTRAINT_DAY("refused_refund_constraint_day"),
    
    REFUSED_REFUND_NON_CAPTURED("refused_refund_non_captured"),
    
    INACTIVE_APPLICATION("inactive_application"),
    
    INACTIVE_PAYMENT_METHOD("inactive_payment_method"),
    
    INACTIVE_PRODUCT("inactive_product"),
    
    EXIST_PAYMENT_METHOD("exist_payment_method"),
    
    CAMPAIGN_ALREADY_STARTED("campaign_already_started"),
    
    OVER_SHOP_LIMIT_COUNT("over_shop_limit_count"),
    
    OVER_PRODUCT_LIMIT_COUNT("over_product_limit_count"),
    
    PROCESS_ERROR("process_error"),
    
    API_CONNECTION_ERROR("api_connection_error"),
    
    PROVIDER_CONFIG_ERROR("provider_config_error"),
    
    API_ERROR("api_error"),
    
    FORBIDDEN("forbidden"),
    
    FORBIDDEN_CLOSE_SELF("forbidden_close_self"),
    
    RECAPTCHA_FAIL("recaptcha_fail");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODE = "code";
  private CodeEnum code;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;


  public ElepayError type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * エラーコードとメッセージ
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "エラーコードとメッセージ")
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }



  public void setType(TypeEnum type) {
    this.type = type;
  }


  public ElepayError code(CodeEnum code) {
    
    this.code = code;
    return this;
  }

   /**
   * エラーコード
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "エラーコード")
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CodeEnum getCode() {
    return code;
  }



  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ElepayError message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * エラーメッセージ
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "エラーメッセージ")
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }



  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElepayError elepayError = (ElepayError) o;
    return Objects.equals(this.type, elepayError.type) &&
        Objects.equals(this.code, elepayError.code) &&
        Objects.equals(this.message, elepayError.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, code, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElepayError {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

